
// ######### the java warapper class  ##### 

class jMediaPlayer {

    private long pascalObj = 0;      // Pascal Object
    private Controls controls  = null;   // Control Class for events
    private Context  context   = null;
	
    private MediaPlayer mplayer = null;
    private String FILE_NAME; 
    
    public jMediaPlayer (Controls contrls, long Self, String _pathToFileName) {	    
       pascalObj   = Self;
	   controls = contrls;
	   context   = contrls.activity;
	   
	   FILE_NAME = _pathToFileName;
	   this.mplayer = new MediaPlayer();
    }
    
    public void SetDataSource(String _path){	 //sets the data source (file path or http url) to use.
    	FILE_NAME = _path;
    	try {
			this.mplayer.setDataSource(FILE_NAME);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
    public void Prepare(){	 //prepares the player for playback synchronously.
    	try {
			this.mplayer.prepare();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    public void Start(){	 //it starts or resumes the playback.
    	this.mplayer.start();
    }
    
    public void Stop(){	 //it stops the playback.
    	this.mplayer.stop();
    }
    
    public void Pause(){	 //it pauses the playback.
    	this.mplayer.pause();
    }
    
    public boolean IsPlaying(){	 //checks if media player is playing.
    	return this.mplayer.isPlaying();
    }
    
    public void SeekTo(int _millis){	 //seeks to specified time in miliseconds.
    	this.mplayer.seekTo(_millis);	
    }
    
    public void SetLooping(boolean _looping){	 //sets the player for looping or non-looping.
    	this.mplayer.setLooping(_looping);
    }
    
    public boolean IsLooping(){	 //checks if the player is looping or non-looping.
    	return this.mplayer.isLooping();
    }
    
    public void SelectTrack(int _index){	 //it selects a track for the specified index.
    	
    }
    
    public int GetCurrentPosition(){	 //returns the current playback position.
    	return this.mplayer.getCurrentPosition();
    }

    public int GetDuration(){	 //returns duration of the file.
    	return this.mplayer.getDuration();
    }
    public void SetVolume(float _leftVolume,float _rightVolume){
    	this.mplayer.setVolume(_leftVolume, _rightVolume);
    }
}


---------------------------------------------------------------------------------------------------

// ######### the Pascal Interface class  ##### 


unit mediaplayer;

{$mode delphi}

interface

uses
  Classes, SysUtils, And_jni, And_jni_Bridge, Laz_And_Controls;

type

{Draft Component code by "Lazarus Android Module Wizard" [4/14/2014 15:18:41]}


{jControl template}

jMediaPlayer = class(jControl)
 private
    FpathToFileName: string;

 protected

 public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Init; override;
    function jCreate( _pathToFileName: string): jObject;
    procedure SetDataSource(_path: string);
    procedure Prepare();
    procedure Start();
    procedure Stop();
    procedure Pause();
    function IsPlaying(): boolean;
    procedure SeekTo(_millis: integer);
    procedure SetLooping(_looping: boolean);
    function IsLooping(): boolean;
    procedure SelectTrack(_index: integer);
    function GetCurrentPosition(): integer;
    function GetDuration(): integer;
    procedure SetVolume(_leftVolume: single; _rightVolume: single);

 published

end;

function jMediaPlayer_jCreate(env: PJNIEnv; this: JObject;Self: int64; _pathToFileName: string): jObject;
procedure jMediaPlayer_SetDataSource(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _path: string);
procedure jMediaPlayer_Prepare(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
procedure jMediaPlayer_Start(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
procedure jMediaPlayer_Stop(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
procedure jMediaPlayer_Pause(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
function jMediaPlayer_IsPlaying(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): boolean;
procedure jMediaPlayer_SeekTo(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _millis: integer);
procedure jMediaPlayer_SetLooping(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _looping: boolean);
function jMediaPlayer_IsLooping(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): boolean;
procedure jMediaPlayer_SelectTrack(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _index: integer);
function jMediaPlayer_GetCurrentPosition(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): integer;
function jMediaPlayer_GetDuration(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): integer;
procedure jMediaPlayer_SetVolume(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _leftVolume: single; _rightVolume: single);


implementation

{---------  jMediaPlayer  --------------}

constructor jMediaPlayer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  //your code here....
end;

destructor jMediaPlayer.Destroy;
begin
  if not (csDesigning in ComponentState) then
  begin
    if jForm(Owner).App <> nil then
    begin
      if jForm(Owner).App.Initialized then
      begin
        if FjObject <> nil then
        begin
           jFree();
           FjObject:= nil;
        end;
      end;
    end;
  end;
  //you others free code here...'
  inherited Destroy;
end;

procedure jMediaPlayer.Init;
begin
  if FInitialized  then Exit;
  inherited Init;
  FjObject:= jCreate(FpathToFileName);
  FInitialized:= True;
  //your code here
end;


function jMediaPlayer.jCreate( _pathToFileName: string): jObject;
begin
   Result:= jMediaPlayer_jCreate(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis , int64(Self) ,_pathToFileName);
end;

procedure jMediaPlayer.SetDataSource(_path: string);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_SetDataSource(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _path);
end;

procedure jMediaPlayer.Prepare();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_Prepare(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.Start();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_Start(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.Stop();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_Stop(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.Pause();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_Pause(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

function jMediaPlayer.IsPlaying(): boolean;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMediaPlayer_IsPlaying(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.SeekTo(_millis: integer);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_SeekTo(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _millis);
end;

procedure jMediaPlayer.SetLooping(_looping: boolean);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_SetLooping(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _looping);
end;

function jMediaPlayer.IsLooping(): boolean;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMediaPlayer_IsLooping(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.SelectTrack(_index: integer);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_SelectTrack(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _index);
end;

function jMediaPlayer.GetCurrentPosition(): integer;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMediaPlayer_GetCurrentPosition(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

function jMediaPlayer.GetDuration(): integer;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMediaPlayer_GetDuration(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;

procedure jMediaPlayer.SetVolume(_leftVolume: single; _rightVolume: single);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMediaPlayer_SetVolume(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _leftVolume ,_rightVolume);
end;

{-------- jMediaPlayer_JNI_Bridge ----------}

function jMediaPlayer_jCreate(env: PJNIEnv; this: JObject;Self: int64; _pathToFileName: string): jObject;
var
  jParams: array[0..1] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[1].j:= Self;
  jParams[2].l:= env^.NewStringUTF(env, PChar(_pathToFileName));;
  jCls:= Get_gjClass(env);
  jMethod:= env^.GetMethodID(env, jCls, 'jMediaPlayer_jCreate', '(JLjava/lang/String;)Ljava/lang/Object;');
  Result:= env^.CallObjectMethodA(env, this, jMethod, @jParams);
  Result:= env^.NewGlobalRef(env, Result);
env^.DeleteLocalRef(env,jParams[2].l);
end;

(*
//Please, you need insert:

   public java.lang.Object jMediaPlayer_jCreate(long Self, String _pathToFileName) {
      return (java.lang.Object)(new jMediaPlayer(this,Self,_pathToFileName));
   }

//to end of "public class Controls" in "Controls.java"
*)


procedure jMediaPlayer_SetDataSource(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _path: string);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].l:= env^.NewStringUTF(env, PChar(_path));
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'SetDataSource', '(Ljava/lang/String;)V');
  env^.CallVoidMethodA(env, _jmediaplayer, jMethod, @jParams);
env^.DeleteLocalRef(env,jParams[0].l);
end;


procedure jMediaPlayer_Prepare(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'Prepare', '()V');
  env^.CallVoidMethod(env, _jmediaplayer, jMethod);
end;


procedure jMediaPlayer_Start(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'Start', '()V');
  env^.CallVoidMethod(env, _jmediaplayer, jMethod);
end;


procedure jMediaPlayer_Stop(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'Stop', '()V');
  env^.CallVoidMethod(env, _jmediaplayer, jMethod);
end;


procedure jMediaPlayer_Pause(env: PJNIEnv; this: JObject; _jmediaplayer: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'Pause', '()V');
  env^.CallVoidMethod(env, _jmediaplayer, jMethod);
end;


function jMediaPlayer_IsPlaying(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): boolean;
var
  jBoo: JBoolean;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'IsPlaying', '()Z');
  jBoo:= env^.CallBooleanMethod(env, _jmediaplayer, jMethod);
  Result:= boolean(jBoo);
end;


procedure jMediaPlayer_SeekTo(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _millis: integer);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].i:= _millis;
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'SeekTo', '(I)V');
  env^.CallVoidMethodA(env, _jmediaplayer, jMethod, @jParams);
end;


procedure jMediaPlayer_SetLooping(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _looping: boolean);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].z:= JBool(_looping);
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'SetLooping', '(Z)V');
  env^.CallVoidMethodA(env, _jmediaplayer, jMethod, @jParams);
end;


function jMediaPlayer_IsLooping(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): boolean;
var
  jBoo: JBoolean;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'IsLooping', '()Z');
  jBoo:= env^.CallBooleanMethod(env, _jmediaplayer, jMethod);
  Result:= boolean(jBoo);
end;


procedure jMediaPlayer_SelectTrack(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _index: integer);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].i:= _index;
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'SelectTrack', '(I)V');
  env^.CallVoidMethodA(env, _jmediaplayer, jMethod, @jParams);
end;


function jMediaPlayer_GetCurrentPosition(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): integer;
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'GetCurrentPosition', '()I');
  Result:= env^.CallIntMethod(env, _jmediaplayer, jMethod);
end;


function jMediaPlayer_GetDuration(env: PJNIEnv; this: JObject; _jmediaplayer: JObject): integer;
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'GetDuration', '()I');
  Result:= env^.CallIntMethod(env, _jmediaplayer, jMethod);
end;


procedure jMediaPlayer_SetVolume(env: PJNIEnv; this: JObject; _jmediaplayer: JObject; _leftVolume: single; _rightVolume: single);
var
  jParams: array[0..1] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].f:= _leftVolume;
  jParams[1].f:= _rightVolume;
  jCls:= env^.GetObjectClass(env, _jmediaplayer);
  jMethod:= env^.GetMethodID(env, jCls, 'SetVolume', '(FF)V');
  env^.CallVoidMethodA(env, _jmediaplayer, jMethod, @jParams);
end;



end.


